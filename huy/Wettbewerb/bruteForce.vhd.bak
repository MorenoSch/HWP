entity bruteForce is
	generic (
		dataWidth : natural := 12;
		keyWidth : natural := 9;
		reversed : std_logic := '0'
	);
	port(
		clk_50 				: in std_logic;
		reset    			: in std_logic;
		cypher_in 			: in std_logic_vector(dataWidth - 1 downto 0);
		start 				: in std_logic;
		plain_out 			: out std_logic_vector(dataWidth - 1 downto 0);
		plain_out_ready	: out std_logic := '0'
	);
end brute_force;

architecture behavior of bruteForce is

component des is
generic (
		dataWidth : natural := 12;
		keyWidth : natural := 9;
		reversed : std_logic := '0'
	);
	port(
		clk_50 : in std_logic;
		rst    : in std_logic;
		mode   : in std_logic; -- 0 encrypt, 1 decrypt
		key_in : in std_logic_vector(keyWidth - 1 downto 0);
		data_in : in std_logic_vector(dataWidth - 1 downto 0);
		enable : in std_logic;
		data_out: out std_logic_vector(dataWidth - 1 downto 0);
		ready	 : out std_logic := '0'
	);
end component;

begin

bruteForce: des
	generic map (
		totalRounds => totalRounds,
		keyWidth => keyWidth
	)
	port map(
		clk_50  => clk_50,
		rst     => rst,
		mode    => mode,
		key_in  => key_in,
		data_in => data_in,
		enable  => enable,
		data_out=> data_out,
		ready	  => ready
	);

end behavior;